{"version":3,"sources":["DndItemTypes.js","components/LeagueTable/Positions.js","jotai/atoms.js","components/LeagueTable/SampleData.js","components/Team/Team.js","components/Position/Position.js","components/LeagueTable/LeagueTable.js","components/App.js","registerServiceWorker.js","index.js"],"names":["ItemTypes","findTeamIndex","teamId","positions","findIndex","team","id","leagueTableAtom","atom","name","editing","readOnlyAtom","get","updateTeamnameAtom","set","update","updatedText","currentPositions","teamIndex","map","pos","index","recalculatePositionsWithRenamedTeam","updateTeamPositionAtom","sourceTeamId","targetTeamId","clonedPositions","find","sourceInfo","targetInfo","recalculateSwappedPositions","Team","props","positionNumber","rank","useAtom","updateTeamname","swapPositions","dragReturn","useDrag","type","item","end","monitor","didDrop","dragItem","getItem","dropResult","getDropResult","classes","classNames","className","style","cursor","ref","onChange","evt","target","value","role","html","autoFocus","maxLength","disabled","Position","dropReturn","useDrop","accept","drop","LeagueTable","DndProvider","backend","HTML5Backend","Col","md","Card","bg","Header","Title","Body","App","Container","Row","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"4OAAaA,EACL,O,uDCDFC,EAAgB,SAACC,EAAQC,GAAT,OACpBA,EAAUC,WAAU,SAACC,GAAD,OAAUA,EAAKC,KAAOJ,MCY/BK,EAAkBC,eCbI,CACjC,CACEC,KAAM,8BACNC,SAAS,EACTJ,GAAI,OAEN,CACEG,KAAM,oBACNC,SAAS,EACTJ,GAAI,OAEN,CACEG,KAAM,uBACNC,SAAS,EACTJ,GAAI,OAEN,CACEG,KAAM,gBACNC,SAAS,EACTJ,GAAI,OAEN,CACEG,KAAM,mBACNC,SAAS,EACTJ,GAAI,OAEN,CACEG,KAAM,gBACNC,SAAS,EACTJ,GAAI,OAEN,CACEG,KAAM,oBACNC,SAAS,EACTJ,GAAI,OAEN,CACEG,KAAM,gBACNC,SAAS,EACTJ,GAAI,OAEN,CACEG,KAAM,gBACNC,SAAS,EACTJ,GAAI,OAEN,CACEG,KAAM,eACNC,SAAS,EACTJ,GAAI,OAEN,CACEG,KAAM,eACNC,SAAS,EACTJ,GAAI,OAEN,CACEG,KAAM,sBACNC,SAAS,EACTJ,GAAI,OAEN,CACEG,KAAM,gBACNC,SAAS,EACTJ,GAAI,OAEN,CACEG,KAAM,aACNC,SAAS,EACTJ,GAAI,OAEN,CACEG,KAAM,cACNC,SAAS,EACTJ,GAAI,OAEN,CACEG,KAAM,cACNC,SAAS,EACTJ,GAAI,OAEN,CACEG,KAAM,WACNC,SAAS,EACTJ,GAAI,OAEN,CACEG,KAAM,gBACNC,SAAS,EACTJ,GAAI,SD1EKK,EAAeH,gBAAK,SAACI,GAAD,OAASA,EAAIL,MACjCM,EAAqBL,eAAK,MAAM,SAACI,EAAKE,EAAKC,GACtDD,EACEP,EDS+C,SACjDF,EACAW,EACAC,GAEA,IAAMC,EAAYjB,EAAcI,EAAKC,GAAIW,GAEzC,OAAOA,EAAiBE,KAAI,SAACC,EAAKC,GAAN,mBAAC,eACxBD,GADuB,IAE1BX,KAAMS,IAAcG,EAAQL,EAAcI,EAAIX,UCjB9Ca,CACEP,EAAOV,KACPU,EAAOC,YACPJ,EAAIL,QAKGgB,EAAyBf,eAAK,MAAM,SAACI,EAAKE,EAAKC,GAC1DD,EACEP,EDvBuC,SACzCiB,EACAC,EACAR,GAEA,IAAMS,EAAe,YAAOT,GAE5B,EAAiC,CAACO,EAAcC,GAAcN,KAAI,SAACb,GAAD,MAAS,CACzEe,MAAOpB,EAAcK,EAAIoB,GACzBrB,MAZcH,EAYCI,EAZOH,EAYHuB,EAXrBvB,EAAUwB,MAAK,SAACtB,GAAD,OAAUA,EAAKC,KAAOJ,OADtB,IAACA,EAAQC,KAUxB,mBAAOyB,EAAP,KAAmBC,EAAnB,KAKA,OAAOZ,EAAiBE,KAAI,SAACC,EAAKC,GAChC,OAAIA,IAAUQ,EAAWR,MAChB,eAAKO,EAAWvB,MACdgB,IAAUO,EAAWP,MACvB,eAAKQ,EAAWxB,MAClB,eAAYe,MCOnBU,CACEf,EAAOS,aACPT,EAAOU,aACPb,EAAIL,Q,OE+CKwB,EAnDF,SAACC,GACZ,IArBiCC,EAqBzBC,EAAeF,EAAfE,KAAM7B,EAAS2B,EAAT3B,KACd,EAA2B8B,kBAAQtB,GAA1BuB,EAAT,oBACA,EAA0BD,kBAAQZ,GAAzBc,EAAT,oBACMC,EAAaC,YAAQ,CACzBC,KAAMxC,EACNyC,KAAM,CAAEpC,QACRqC,IAAK,SAACD,EAAME,GACV,GAAKA,EAAQC,UAAb,CAGA,IAAMC,EAAWF,EAAQG,UACnBC,EAAaJ,EAAQK,gBAC3BX,EAAc,CACZb,aAAcqB,EAASxC,KAAKC,GAC5BmB,aAAcsB,EAAW1C,KAAKC,SAK9B2C,EAAUC,IACd,YACA,MACA,YA1CqB,KADUjB,EA4CLC,GA1CnB,oCAELD,GAAkB,EACb,oCAELA,GAAkB,EACb,iCAELA,GAAkB,GACb,+BAEc,KAAnBA,EACK,+BAEA,6BAmCT,OACE,qBAAKkB,UAAWF,EAASG,MAAO,CAAEC,OAAQ,WAAaC,IAAKhB,EAAW,GAAvE,SACE,cAAC,IAAD,CACEiB,SAPW,SAACC,GAChBpB,EAAe,CAAE/B,OAAMW,YAAawC,EAAIC,OAAOC,SAO3CC,KAAM,SACNR,UAAU,cACVS,KAAMvD,EAAKI,KACXoD,WAAW,EACXC,UAAW,IACXC,UAAW1D,EAAKK,aC5CTsD,EAnBE,SAAChC,GAChB,IAAM3B,EAAO2B,EAAM3B,KACb6B,EAAOF,EAAME,KACb+B,EAAaC,YAAQ,CACzBC,OAAQnE,EACRoE,KAAM,iBAAO,CAAE/D,WAEjB,OACE,qBAAKiD,IAAKW,EAAW,GAArB,SACE,cAAC,EAAD,CAAM5D,KAAMA,EAAM6B,KAAMA,O,gCCafmC,EApBK,WAClB,MAAoBlC,kBAAQxB,GAArBR,EAAP,oBACA,OACE,cAACmE,EAAA,EAAD,CAAaC,QAASC,IAAtB,SACE,cAACC,EAAA,EAAD,CAAKC,GAAI,EAAT,SACE,eAACC,EAAA,EAAD,CAAMC,GAAG,OAAT,UACE,cAACD,EAAA,EAAKE,OAAN,CAAalB,KAAM,UAAnB,SACE,cAACgB,EAAA,EAAKG,MAAN,8CAEF,cAACH,EAAA,EAAKI,KAAN,UACG5E,EAAUgB,KAAI,SAACd,EAAMgB,GAAP,OACb,cAAC,EAAD,CAAUhB,KAAMA,EAAM6B,KAAMb,EAAQ,GAAQA,gBCE3C2D,EAdH,WACV,OACE,qBAAK7B,UAAU,QAAf,SACE,cAAC8B,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,UACE,cAAC,WAAD,UACE,cAAC,EAAD,aCHNC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTI,MAAK,SAACC,GACLA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,WAK1BC,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,4CAMrBC,OAAM,SAACC,GACNH,QAAQG,MAAM,4CAA6CA,M,MCxEjEC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,SDalC,WACb,GAA6C,kBAAmBlB,UAAW,CAGzE,GADkB,IAAImB,IAAIC,eAAwB1B,OAAOC,UAC3C0B,SAAW3B,OAAOC,SAAS0B,OAIvC,OAGF3B,OAAO4B,iBAAiB,QAAQ,WAC9B,IAAMvB,EAAK,UAAMqB,eAAN,sBAEP5B,IAiDV,SAAiCO,GAE/BwB,MAAMxB,GACHI,MAAK,SAACqB,GAGiB,MAApBA,EAASC,SACuD,IAAhED,EAASE,QAAQzG,IAAI,gBAAgB0G,QAAQ,cAG7C3B,UAAUC,cAAc2B,MAAMzB,MAAK,SAACC,GAClCA,EAAayB,aAAa1B,MAAK,WAC7BT,OAAOC,SAASmC,eAKpBhC,EAAgBC,MAGnBc,OAAM,WACLF,QAAQC,IACN,oEArEAmB,CAAwBhC,GAIxBC,UAAUC,cAAc2B,MAAMzB,MAAK,WACjCQ,QAAQC,IACN,gHAMJd,EAAgBC,OCxCxBiC,K","file":"static/js/main.a48b933b.chunk.js","sourcesContent":["export const ItemTypes = {\n  TEAM: 'team',\n};\n","const findTeamIndex = (teamId, positions) =>\n  positions.findIndex((team) => team.id === teamId);\n\nconst findTeam = (teamId, positions) =>\n  positions.find((team) => team.id === teamId);\n\nexport const recalculateSwappedPositions = (\n  sourceTeamId,\n  targetTeamId,\n  currentPositions\n) => {\n  const clonedPositions = [...currentPositions];\n\n  const [sourceInfo, targetInfo] = [sourceTeamId, targetTeamId].map((id) => ({\n    index: findTeamIndex(id, clonedPositions),\n    team: findTeam(id, clonedPositions),\n  }));\n\n  return currentPositions.map((pos, index) => {\n    if (index === targetInfo.index) {\n      return { ...sourceInfo.team };\n    } else if (index === sourceInfo.index) {\n      return { ...targetInfo.team };\n    } else return { ...pos };\n  });\n};\n\nexport const recalculatePositionsWithRenamedTeam = (\n  team,\n  updatedText,\n  currentPositions\n) => {\n  const teamIndex = findTeamIndex(team.id, currentPositions);\n\n  return currentPositions.map((pos, index) => ({\n    ...pos,\n    name: teamIndex === index ? updatedText : pos.name,\n  }));\n};\n","import { atom } from 'jotai';\nimport {\n  recalculatePositionsWithRenamedTeam,\n  recalculateSwappedPositions,\n} from '../components/LeagueTable/Positions';\nimport { SAMPLE_LEAGUE_TABLE } from '../components/LeagueTable/SampleData';\n\n/**\nconst initalValueAtom = atomWithQuery((get) => ({\n  queryKey: ['leagueTable'],\n  queryFn: getSampleData,\n}));\n**/\nexport const leagueTableAtom = atom(SAMPLE_LEAGUE_TABLE);\n\nexport const readOnlyAtom = atom((get) => get(leagueTableAtom));\nexport const updateTeamnameAtom = atom(null, (get, set, update) => {\n  set(\n    leagueTableAtom,\n    recalculatePositionsWithRenamedTeam(\n      update.team,\n      update.updatedText,\n      get(leagueTableAtom)\n    )\n  );\n});\n\nexport const updateTeamPositionAtom = atom(null, (get, set, update) => {\n  set(\n    leagueTableAtom,\n    recalculateSwappedPositions(\n      update.sourceTeamId,\n      update.targetTeamId,\n      get(leagueTableAtom)\n    )\n  );\n});\n","export const SAMPLE_LEAGUE_TABLE = [\n  {\n    name: 'Borussia Mönchengladbach',\n    editing: true,\n    id: 'BMG',\n  },\n  {\n    name: 'Borussia Dortmund',\n    editing: true,\n    id: 'BVB',\n  },\n  {\n    name: 'FC Bayern München',\n    editing: true,\n    id: 'FCB',\n  },\n  {\n    name: 'VFL Wolfsburg',\n    editing: true,\n    id: 'VFL',\n  },\n  {\n    name: 'Bayer Leverkusen',\n    editing: true,\n    id: 'B04',\n  },\n  {\n    name: 'FC Schalke 04',\n    editing: true,\n    id: 'S04',\n  },\n  {\n    name: 'Hertha BSC Berlin',\n    editing: true,\n    id: 'BSC',\n  },\n  {\n    name: '1. FC Köln',\n    editing: true,\n    id: '1FC',\n  },\n  {\n    name: 'FC Ingolstadt',\n    editing: true,\n    id: 'FCI',\n  },\n  {\n    name: 'Darmstadt 98',\n    editing: true,\n    id: 'D98',\n  },\n  {\n    name: 'Hamburger SV',\n    editing: true,\n    id: 'HSV',\n  },\n  {\n    name: 'Eintracht Frankfurt',\n    editing: true,\n    id: 'SGE',\n  },\n  {\n    name: 'Werder Bremen',\n    editing: true,\n    id: 'SVW',\n  },\n  {\n    name: 'Hoffenheim',\n    editing: true,\n    id: 'SAP',\n  },\n  {\n    name: 'FC Augsburg',\n    editing: true,\n    id: 'FCA',\n  },\n  {\n    name: 'Hannover 96',\n    editing: true,\n    id: 'H96',\n  },\n  {\n    name: 'Mainz 05',\n    editing: true,\n    id: 'M05',\n  },\n  {\n    name: 'VFB Stuttgart',\n    editing: true,\n    id: 'VFB',\n  },\n];\n","import { useDrag } from 'react-dnd';\nimport React from 'react';\nimport { ItemTypes } from '../../DndItemTypes';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport ContentEditable from 'react-contenteditable';\nimport { useAtom } from 'jotai';\nimport { updateTeamnameAtom, updateTeamPositionAtom } from '../../jotai/atoms';\n\nconst calculatePositionCssClass = (positionNumber) => {\n  if (positionNumber === 1) {\n    return 'tabellenfuehrerClass tabelleClass';\n  }\n  if (positionNumber <= 3) {\n    return 'championsLeagueClass tabelleClass';\n  }\n  if (positionNumber <= 6) {\n    return 'europaLeagueClass tabelleClass';\n  }\n  if (positionNumber <= 15) {\n    return 'mittelfeldClass tabelleClass';\n  }\n  if (positionNumber === 16) {\n    return 'relegationClass tabelleClass';\n  } else {\n    return 'abstiegClass tabelleClass';\n  }\n};\n\nconst Team = (props) => {\n  const { rank, team } = props;\n  const [, updateTeamname] = useAtom(updateTeamnameAtom);\n  const [, swapPositions] = useAtom(updateTeamPositionAtom);\n  const dragReturn = useDrag({\n    type: ItemTypes.TEAM,\n    item: { team },\n    end: (item, monitor) => {\n      if (!monitor.didDrop()) {\n        return;\n      }\n      const dragItem = monitor.getItem();\n      const dropResult = monitor.getDropResult();\n      swapPositions({\n        sourceTeamId: dragItem.team.id,\n        targetTeamId: dropResult.team.id,\n      });\n    },\n  });\n\n  const classes = classNames(\n    'col-md-12',\n    'btn',\n    'text-bold',\n    calculatePositionCssClass(rank)\n  );\n\n  const onChange = (evt) => {\n    updateTeamname({ team, updatedText: evt.target.value });\n  };\n\n  return (\n    <div className={classes} style={{ cursor: 'pointer' }} ref={dragReturn[1]}>\n      <ContentEditable\n        onChange={onChange}\n        role={'button'}\n        className=\"textPointer\"\n        html={team.name}\n        autoFocus={true}\n        maxLength={200}\n        disabled={!team.editing}\n      />\n    </div>\n  );\n};\n\nTeam.propTypes = {\n  rank: PropTypes.number.isRequired,\n  team: PropTypes.object.isRequired,\n};\n\nexport default Team;\n","import React from 'react';\nimport { useDrop } from 'react-dnd';\nimport Team from '../Team/Team';\nimport PropTypes from 'prop-types';\nimport { ItemTypes } from '../../DndItemTypes';\n\nconst Position = (props) => {\n  const team = props.team;\n  const rank = props.rank;\n  const dropReturn = useDrop({\n    accept: ItemTypes.TEAM,\n    drop: () => ({ team }),\n  });\n  return (\n    <div ref={dropReturn[1]}>\n      <Team team={team} rank={rank} />\n    </div>\n  );\n};\n\nPosition.propTypes = {\n  rank: PropTypes.number.isRequired,\n  team: PropTypes.object.isRequired,\n};\n\nexport default Position;\n","import React from 'react';\nimport Position from '../Position/Position';\nimport { DndProvider } from 'react-dnd';\nimport { HTML5Backend } from 'react-dnd-html5-backend';\nimport { Card, Col } from 'react-bootstrap';\nimport { useAtom } from 'jotai';\nimport { readOnlyAtom } from '../../jotai/atoms';\n\nconst LeagueTable = () => {\n  const [positions] = useAtom(readOnlyAtom);\n  return (\n    <DndProvider backend={HTML5Backend}>\n      <Col md={6}>\n        <Card bg=\"dark\">\n          <Card.Header role={'heading'}>\n            <Card.Title>Ligatabelle zum Selberstecken</Card.Title>\n          </Card.Header>\n          <Card.Body>\n            {positions.map((team, index) => (\n              <Position team={team} rank={index + 1} key={index} />\n            ))}\n          </Card.Body>\n        </Card>\n      </Col>\n    </DndProvider>\n  );\n};\n\nexport default LeagueTable;\n","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './App.css';\nimport { Container, Row } from 'react-bootstrap';\nimport LeagueTable from './LeagueTable/LeagueTable';\nimport { Provider } from 'jotai';\n\nconst App = () => {\n  return (\n    <div className=\"index\">\n      <Container>\n        <Row>\n          <Provider>\n            <LeagueTable />\n          </Provider>\n        </Row>\n      </Container>\n    </div>\n  );\n};\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport registerServiceWorker from './registerServiceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}